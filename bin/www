#!/usr/bin/env node
/*
 * spetrenko.ru - my sweety personal pet-project sources
 * https://github.com/digitalhitler/spetrenko.ru
 *
 * Copyright © 1992-2016 Sergey Petrenko
 * This file may be the part of sp.ru source code.
 *
 * This software is licensed under the Creative Commons Attribution-NonCommercial 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc/4.0/. In either words, you can do anything except any kind of commercial purposes without a permission of author.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *  © Sergey Petrenko <spetrenko@me.com>
 */

const logger = require('debug');
logger.enable('sp.ru:*');

const debug = require('debug')('sp.ru:watch');
debug(`Starting express server in regular mode...`);

const app = require('../src/server/bin/www')({});

module.exports = app;

//
///**
// * Module dependencies.
// */
//
//var app = require('../app');
//var debug = require('debug')('sp.ru:server');
//var http = require('http');
//
///**
// * Get port from environment and store in Express.
// */
//
//var port = normalizePort(process.env.PORT || '3000');
//app.set('port', port);
//
///**
// * Create HTTP server.
// */
//
//var server = http.createServer(app);
//
///**
// * Listen on provided port, on all network interfaces.
// */
//
//server.listen(port);
//server.on('error', onError);
//server.on('listening', onListening);
//
///**
// * Normalize a port into a number, string, or false.
// */
//
//function normalizePort(val) {
//  var port = parseInt(val, 10);
//
//  if (isNaN(port)) {
//    // named pipe
//    return val;
//  }
//
//  if (port >= 0) {
//    // port number
//    return port;
//  }
//
//  return false;
//}
//
///**
// * Event listener for HTTP server "error" event.
// */
//
//function onError(error) {
//  if (error.syscall !== 'listen') {
//    throw error;
//  }
//
//  var bind = typeof port === 'string'
//    ? 'Pipe ' + port
//    : 'Port ' + port;
//
//  // handle specific listen errors with friendly messages
//  switch (error.code) {
//    case 'EACCES':
//      console.error(bind + ' requires elevated privileges');
//      process.exit(1);
//      break;
//    case 'EADDRINUSE':
//      console.error(bind + ' is already in use');
//      process.exit(1);
//      break;
//    default:
//      throw error;
//  }
//}
//
///**
// * Event listener for HTTP server "listening" event.
// */
//
//function onListening() {
//  var addr = server.address();
//  var bind = typeof addr === 'string'
//    ? 'pipe ' + addr
//    : 'port ' + addr.port;
//  debug('Listening on ' + bind);
//}
